package com.springmvc.api;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.json.JSONArray;
import org.json.JSONObject;

import com.springmvc.domain.Stadium;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class CsvToJsonConverter {

    public static void jsonConverter() {
        // 상대 경로 사용
        String csvFilePath = "csv/stadiumInGN.csv"; // 프로젝트 루트 디렉토리에서 상대 경로

        try (InputStream inputStream = CsvToJsonConverter.class.getClassLoader().getResourceAsStream(csvFilePath);
             InputStreamReader reader = new InputStreamReader(inputStream, "EUC-KR");
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader())) {

            int i = 0;
            JSONArray jsonArray = new JSONArray();
            List<Stadium> listOfStd = new ArrayList<>();

            for (CSVRecord csvRecord : csvParser) {
                i++;
                JSONObject jsonObject = new JSONObject();
                csvRecord.toMap().forEach((key, value) -> jsonObject.put(key, value));
                jsonArray.put(jsonObject);

                Stadium stadium = new Stadium();

                setPropertyValue(jsonObject, stadium, "경기장 1,3루 길이", "baseLength");
                setPropertyValue(jsonObject, stadium, "연면적", "totalArea");
                setPropertyValue(jsonObject, stadium, "경기장 바닥재료(외야)", "outfieldMaterial");
                setPropertyValue(jsonObject, stadium, "시군구", "countryside");
                setPropertyValue(jsonObject, stadium, "준공연도", "builtYear");
                setPropertyValue(jsonObject, stadium, "관람석 좌석수", "seatsNumber");
                setPropertyValue(jsonObject, stadium, "시설명", "stdName");
                setPropertyValue(jsonObject, stadium, "시도", "city");
                setPropertyValue(jsonObject, stadium, "건축면적", "buildingArea");
                setPropertyValue(jsonObject, stadium, "관리주체", "manager");
                setPropertyValue(jsonObject, stadium, "경기장 바닥재료(내야)", "infieldMaterial");
                setPropertyValue(jsonObject, stadium, "경기장 중앙 길이", "centerLength");
                setPropertyValue(jsonObject, stadium, "소유기관", "ownership");
                setPropertyValue(jsonObject, stadium, "경기장 면적", "siteArea");
                setPropertyValue(jsonObject, stadium, "관람석 수용인원(명)", "capacity");

                System.out.println(i + "번째" + stadium);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // JSONObject의 값이 빈 문자열이 아닌지 확인하는 메서드
    private static boolean valueIsNotEmpty(JSONObject jsonObject, String key) {
        return jsonObject.has(key) && !jsonObject.getString(key).isEmpty();
    }

    // Stadium 객체의 속성 값을 설정하는 메서드
    private static void setPropertyValue(JSONObject jsonObject, Stadium stadium, String key, String propertyName) {
        if (valueIsNotEmpty(jsonObject, key)) {
            switch (propertyName) {
                case "baseLength":
                case "centerLength":
                case "siteArea":
                case "capacity":
                    stadium.setIntProperty(propertyName, jsonObject.getInt(key));
                    break;
                case "totalArea":
                    stadium.setDoubleProperty(propertyName, valueIsNotEmpty(jsonObject, key) ? jsonObject.getDouble(key) : 0.0);
                    break;
                default:
                    stadium.setStringProperty(propertyName, jsonObject.getString(key));
                    break;
            }
        }
    }

    public static void main(String[] args) {
        // jsonConverter 함수 호출
        jsonConverter();
    }
}
